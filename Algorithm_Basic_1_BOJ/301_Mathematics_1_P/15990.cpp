/**
 * BOJ_15990_1,2,3 더하기 5
 * '연속' 조건은 직전에 사용된 수와의 관계를 생각해본다, 이 문제의 경우 마지막에 사용된 수 생각
 * 1,2,3의 합으로 나타내는거니 마지막수가 1이라면 직전에 사용 가능한 수는 2,3이다.
 * d[i][j] = i를 1,2,3의 합으로 나타내는 방법의 수, 마지막에 사용된 수는 j
 * 이 문제에서 j의 범위는 1~3
 * d[i][1] = d[i-1][2] + d[i-1][3], j=1
 * d[i][2] = d[i-2][1] + d[i-2][3], j=2
 * d[i][3] = d[i-3][1] + d[i-3][2], j=3
 * 점화식 => d[i] = d[i][1] + d[i][2] + d[i][3]
 */

#include <bits/stdc++.h>
using namespace std;

long long d[100001][4];
const long long mod = 1000000009LL; // 1e9 = 1*10^9 = 1000000000
const int limit = 100000;  // n <= 100000

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    // Bottom-up 
    for (int i = 1; i <= limit; i++) {
        if (i - 1 >= 0) {
            d[i][1] = d[i - 1][2] + d[i - 1][3];
            // 이전 문제 1,2,3 더하기와 다르게 d[0]을 1로 초기화 하면
            // 아래 d[1][1]에 2가 대입되는 중복 문제가 발생한다.
            // 그래서 따로 예외처리를 해서 1을 대입해놔야 함
            if (i == 1) {
                d[i][1] = 1; // i를 i를 포함하여 합으로 나타내는 방법은 한가지밖에 없음.
            }
        }
        if (i - 2 >= 0) {
            d[i][2] = d[i - 2][1] + d[i - 2][3];
            if (i == 2) {
                d[i][2] = 1;
            }
        }
        if (i - 3 >= 0) {
            d[i][3] = d[i - 3][1] + d[i - 3][2];
            if (i == 3) {
                d[i][3] = 1;
            }
        }
        d[i][1] %= mod;
        d[i][2] %= mod;
        d[i][3] %= mod;
    }

    int t;
    cin >> t;

    while (t--) {
        int n;
        cin >> n;
        cout << (d[n][1] + d[n][2] + d[n][3]) % mod << '\n';
    }

    return 0;
}
